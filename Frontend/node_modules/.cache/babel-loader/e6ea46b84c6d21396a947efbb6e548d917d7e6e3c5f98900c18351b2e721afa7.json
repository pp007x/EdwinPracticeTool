{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\Documents\\\\PracticeTool\\\\practicetool\\\\src\\\\components\\\\ReactionForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionForm() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    // Adjust the URL below according to your API\n    axios.get(\"http://localhost:5162/api/Users/Questions\").then(response => {\n      setQuestions(response.data);\n    });\n  }, []);\n  const handleSubmit = event => {\n    event.preventDefault();\n    let totalScore = 0;\n    questions.forEach(question => {\n      const selectedAnswer = document.querySelector(`input[name=\"${question.id}\"]:checked`);\n      if (selectedAnswer) {\n        totalScore += Number(selectedAnswer.value);\n      }\n    });\n\n    // Send totalScore and userID to your server.\n    // The userID can be extracted from your authentication token, for example\n    const userID = \"extractedUserID\";\n    axios.post(\"http://localhost:5162/api/Users/TotalScores\", {\n      User_id: userID,\n      Total_score: totalScore\n    }).then(response => console.log(response)).catch(error => console.error(error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), question.answers.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          id: answer.id,\n          name: question.id,\n          value: answer.scoreValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: answer.id,\n          children: answer.answerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this)]\n      }, answer.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this))]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(QuestionForm, \"1ery3Y2F+nTWSbC27k3nmjCRtvo=\");\n_c = QuestionForm;\nexport default QuestionForm;\nvar _c;\n$RefreshReg$(_c, \"QuestionForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","QuestionForm","_s","questions","setQuestions","get","then","response","data","handleSubmit","event","preventDefault","totalScore","forEach","question","selectedAnswer","document","querySelector","id","Number","value","userID","post","User_id","Total_score","console","log","catch","error","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","map","questionText","answers","answer","type","name","scoreValue","htmlFor","answerText","_c","$RefreshReg$"],"sources":["C:/Users/steph/Documents/PracticeTool/practicetool/src/components/ReactionForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction QuestionForm() {\r\n    const [questions, setQuestions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Adjust the URL below according to your API\r\n        axios.get(\"http://localhost:5162/api/Users/Questions\")\r\n            .then(response => {\r\n                setQuestions(response.data);\r\n            });\r\n    }, []);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        let totalScore = 0;\r\n\r\n        questions.forEach(question => {\r\n            const selectedAnswer = document.querySelector(`input[name=\"${question.id}\"]:checked`);\r\n\r\n            if (selectedAnswer) {\r\n                totalScore += Number(selectedAnswer.value);\r\n            }\r\n        });\r\n\r\n        // Send totalScore and userID to your server.\r\n        // The userID can be extracted from your authentication token, for example\r\n        const userID = \"extractedUserID\";\r\n\r\n        axios.post(\"http://localhost:5162/api/Users/TotalScores\", { User_id: userID, Total_score: totalScore })\r\n            .then(response => console.log(response))\r\n            .catch(error => console.error(error));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h1>Questions</h1>\r\n            {questions.map(question => (\r\n                <div key={question.id}>\r\n                    <h2>{question.questionText}</h2>\r\n                    {question.answers.map(answer => (\r\n                        <div key={answer.id}>\r\n                            <input type=\"radio\" id={answer.id} name={question.id} value={answer.scoreValue} />\r\n                            <label htmlFor={answer.id}>{answer.answerText}</label>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default QuestionForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}