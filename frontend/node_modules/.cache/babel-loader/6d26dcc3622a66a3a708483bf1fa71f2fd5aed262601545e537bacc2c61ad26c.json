{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\Documents\\\\EdwinPracticeTool\\\\frontend\\\\src\\\\components\\\\ReactionForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport config from '../config';\nimport 'survey-core/defaultV2.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ReactionForm = () => {\n  _s();\n  const [survey, setSurvey] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchProfileAndQuestions = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const localConfig = {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        };\n        const profileResponse = await axios.get(`${config.API_BASE_URL}/api/Users/Profile`, localConfig);\n        const questionsResponse = await axios.get(`${config.API_BASE_URL}/api/ReactionForm?companyId=${profileResponse.data.companyId}`, localConfig);\n        setUserId(profileResponse.data.id);\n        const surveyQuestions = questionsResponse.data.map((question, index) => ({\n          type: \"radiogroup\",\n          name: `question${index}`,\n          title: question.questionText,\n          choices: question.answers.map(answer => ({\n            value: answer.id,\n            text: answer.answerText\n          }))\n        }));\n        const surveyModel = new SurveyModel({\n          questions: surveyQuestions\n        });\n        setSurvey(surveyModel);\n      } catch (error) {\n        console.error('Failed to fetch profile or questions:', error);\n      }\n    };\n    fetchProfileAndQuestions();\n  }, []);\n  const handleSubmit = async survey => {\n    const {\n      data\n    } = survey;\n    let totalScoreD = 0;\n    let totalScoreI = 0;\n    let totalScoreS = 0;\n    let totalScoreC = 0;\n    for (const key in data) {\n      const questionId = parseInt(key.replace(\"question\", \"\"), 10);\n      const answerId = data[key];\n      const question = survey.getAllQuestions()[questionId];\n      const selectedAnswer = question.choices.find(answer => answer.value === answerId);\n      if (selectedAnswer) {\n        totalScoreD += selectedAnswer.scoreValueD;\n        totalScoreI += selectedAnswer.scoreValueI;\n        totalScoreS += selectedAnswer.scoreValueS;\n        totalScoreC += selectedAnswer.scoreValueC;\n      }\n    }\n    const totalScore = {\n      scoreValueD: totalScoreD,\n      scoreValueI: totalScoreI,\n      scoreValueS: totalScoreS,\n      scoreValueC: totalScoreC,\n      userId: userId\n    };\n    try {\n      const token = localStorage.getItem('token');\n      const localConfig = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      const response = await axios.post(`${config.API_BASE_URL}/api/TotalScores`, totalScore, localConfig);\n      console.log(response.data);\n      navigate('/dashboard');\n    } catch (error) {\n      console.error(\"Failed to submit total score:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: survey ? /*#__PURE__*/_jsxDEV(Survey.Survey, {\n      survey: survey,\n      onComplete: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are no questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(ReactionForm, \"5dpGDBDLyjNfOtXM9YKgHchvAaI=\", false, function () {\n  return [useNavigate];\n});\n_c = ReactionForm;\nexport default ReactionForm;\nvar _c;\n$RefreshReg$(_c, \"ReactionForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","config","jsxDEV","_jsxDEV","Fragment","_Fragment","ReactionForm","_s","survey","setSurvey","userId","setUserId","navigate","fetchProfileAndQuestions","token","localStorage","getItem","localConfig","headers","Authorization","profileResponse","get","API_BASE_URL","questionsResponse","data","companyId","id","surveyQuestions","map","question","index","type","name","title","questionText","choices","answers","answer","value","text","answerText","surveyModel","SurveyModel","questions","error","console","handleSubmit","totalScoreD","totalScoreI","totalScoreS","totalScoreC","key","questionId","parseInt","replace","answerId","getAllQuestions","selectedAnswer","find","scoreValueD","scoreValueI","scoreValueS","scoreValueC","totalScore","response","post","log","children","Survey","onComplete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/steph/Documents/EdwinPracticeTool/frontend/src/components/ReactionForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport config from '../config';\r\nimport 'survey-core/defaultV2.min.css';\r\n\r\nconst ReactionForm = () => {\r\n  const [survey, setSurvey] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchProfileAndQuestions = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const localConfig = {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n        \r\n        const profileResponse = await axios.get(`${config.API_BASE_URL}/api/Users/Profile`, localConfig);\r\n        const questionsResponse = await axios.get(`${config.API_BASE_URL}/api/ReactionForm?companyId=${profileResponse.data.companyId}`, localConfig);\r\n\r\n        setUserId(profileResponse.data.id);\r\n\r\n        const surveyQuestions = questionsResponse.data.map((question, index) => ({\r\n          type: \"radiogroup\",\r\n          name: `question${index}`,\r\n          title: question.questionText,\r\n          choices: question.answers.map((answer) => ({\r\n            value: answer.id,\r\n            text: answer.answerText,\r\n          })),\r\n        }));\r\n\r\n        const surveyModel = new SurveyModel({ questions: surveyQuestions });\r\n        setSurvey(surveyModel);\r\n      } catch (error) {\r\n        console.error('Failed to fetch profile or questions:', error);\r\n      }\r\n    };\r\n    fetchProfileAndQuestions();\r\n  }, []);\r\n\r\n  const handleSubmit = async (survey) => {\r\n    const { data } = survey;\r\n\r\n    let totalScoreD = 0;\r\n    let totalScoreI = 0;\r\n    let totalScoreS = 0;\r\n    let totalScoreC = 0;\r\n\r\n    for (const key in data) {\r\n      const questionId = parseInt(key.replace(\"question\", \"\"), 10);\r\n      const answerId = data[key];\r\n\r\n      const question = survey.getAllQuestions()[questionId];\r\n      const selectedAnswer = question.choices.find((answer) => answer.value === answerId);\r\n\r\n      if (selectedAnswer) {\r\n        totalScoreD += selectedAnswer.scoreValueD;\r\n        totalScoreI += selectedAnswer.scoreValueI;\r\n        totalScoreS += selectedAnswer.scoreValueS;\r\n        totalScoreC += selectedAnswer.scoreValueC;\r\n      }\r\n    }\r\n\r\n    const totalScore = {\r\n      scoreValueD: totalScoreD,\r\n      scoreValueI: totalScoreI,\r\n      scoreValueS: totalScoreS,\r\n      scoreValueC: totalScoreC,\r\n      userId: userId,\r\n    };\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const localConfig = {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      };\r\n      const response = await axios.post(\r\n        `${config.API_BASE_URL}/api/TotalScores`,\r\n        totalScore,\r\n        localConfig\r\n      );\r\n      console.log(response.data);\r\n\r\n      navigate('/dashboard');\r\n    } catch (error) {\r\n      console.error(\"Failed to submit total score:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {survey ? (\r\n        <Survey.Survey\r\n          survey={survey}\r\n          onComplete={handleSubmit}\r\n        />\r\n      ) : (\r\n        <p>There are no questions</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReactionForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}