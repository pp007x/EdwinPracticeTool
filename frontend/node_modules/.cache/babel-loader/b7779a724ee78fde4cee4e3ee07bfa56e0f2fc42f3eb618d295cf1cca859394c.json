{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\Documents\\\\EdwinPracticeTool\\\\frontend\\\\src\\\\components\\\\Admin\\\\AdminEditQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport config from '../../config';\nimport DashboardSidebar from './AdminSidebar';\nimport styles from '../../Css/Dashboard.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = _ref => {\n  let {\n    title\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.header,\n    children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"page-title\"],\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n};\n_c = Header;\nfunction AdminEditQuestions() {\n  _s();\n  const [companies, setCompanies] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState('');\n  useEffect(() => {\n    fetch(`${config.API_BASE_URL}/api/companies`).then(response => response.json()).then(data => setCompanies(data));\n  }, []);\n  useEffect(() => {\n    if (selectedCompany) {\n      fetch(`${config.API_BASE_URL}/api/questions?companyId=${selectedCompany}`).then(response => response.json()).then(data => setQuestions(data));\n    }\n  }, [selectedCompany]);\n  const handleCompanyChange = event => {\n    const companyId = event.target.value;\n    setSelectedCompany(companyId);\n  };\n  const handleQuestionChange = (index, event) => {\n    const {\n      name,\n      value\n    } = event.target;\n    setQuestions(prevState => prevState.map((question, i) => i === index ? {\n      ...question,\n      [name]: value\n    } : question));\n  };\n  const handleSaveChanges = question => {\n    fetch(`${config.API_BASE_URL}/api/Questions/${question.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(question)\n    }).then(response => {\n      if (response.ok) {\n        console.log('Question updated successfully');\n      } else {\n        console.error('Failed to update question');\n      }\n    }).catch(error => console.error('Error:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dashboard,\n    children: [/*#__PURE__*/_jsxDEV(DashboardSidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.main,\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Admin Edit Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCompany,\n        onChange: handleCompanyChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a company...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), companies.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: company.id,\n          children: company.name\n        }, company.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit existing questions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), questions.map((question, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Question Text:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"questionText\",\n            value: question.questionText,\n            onChange: event => handleQuestionChange(i, event)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSaveChanges(question),\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminEditQuestions, \"WW4KwbJadenudOCkhelV9V2b7yw=\");\n_c2 = AdminEditQuestions;\nexport default AdminEditQuestions;\nvar _c, _c2;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"AdminEditQuestions\");","map":{"version":3,"names":["React","useState","useEffect","config","DashboardSidebar","styles","jsxDEV","_jsxDEV","Header","_ref","title","className","header","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","AdminEditQuestions","_s","companies","setCompanies","questions","setQuestions","selectedCompany","setSelectedCompany","fetch","API_BASE_URL","then","response","json","data","handleCompanyChange","event","companyId","target","value","handleQuestionChange","index","name","prevState","map","question","i","handleSaveChanges","id","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","ok","console","log","error","catch","dashboard","main","onChange","company","type","questionText","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/steph/Documents/EdwinPracticeTool/frontend/src/components/Admin/AdminEditQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport config from '../../config';\r\nimport DashboardSidebar from './AdminSidebar';\r\nimport styles from '../../Css/Dashboard.module.css';\r\n\r\nconst Header = ({ title }) => (\r\n  <div className={styles.header}>\r\n    <hr />\r\n    <div className={styles[\"page-title\"]}>{title}</div>\r\n  </div>\r\n);\r\n\r\nfunction AdminEditQuestions() {\r\n  const [companies, setCompanies] = useState([]);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [selectedCompany, setSelectedCompany] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetch(`${config.API_BASE_URL}/api/companies`)\r\n      .then(response => response.json())\r\n      .then(data => setCompanies(data));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany) {\r\n      fetch(`${config.API_BASE_URL}/api/questions?companyId=${selectedCompany}`)\r\n        .then(response => response.json())\r\n        .then(data => setQuestions(data));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  const handleCompanyChange = (event) => {\r\n    const companyId = event.target.value;\r\n    setSelectedCompany(companyId);\r\n  };\r\n\r\n  const handleQuestionChange = (index, event) => {\r\n    const { name, value } = event.target;\r\n    setQuestions(prevState => prevState.map((question, i) => i === index ? { ...question, [name]: value } : question));\r\n  };\r\n\r\n  const handleSaveChanges = (question) => {\r\n    fetch(`${config.API_BASE_URL}/api/Questions/${question.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`\r\n      },\r\n      body: JSON.stringify(question)\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          console.log('Question updated successfully');\r\n        } else {\r\n          console.error('Failed to update question');\r\n        }\r\n      })\r\n      .catch(error => console.error('Error:', error));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.dashboard}>\r\n      <DashboardSidebar />\r\n      <div className={styles.main}>\r\n        <Header title=\"Admin Edit Questions\" />\r\n        <select value={selectedCompany} onChange={handleCompanyChange}>\r\n          <option value=\"\">Select a company...</option>\r\n          {companies.map(company => (\r\n            <option key={company.id} value={company.id}>{company.name}</option>\r\n          ))}\r\n        </select>\r\n\r\n        <h2>Edit existing questions:</h2>\r\n        {questions.map((question, i) => (\r\n          <div key={question.id}>\r\n            <label>\r\n              Question Text:\r\n              <input\r\n                type=\"text\"\r\n                name=\"questionText\"\r\n                value={question.questionText}\r\n                onChange={(event) => handleQuestionChange(i, event)}\r\n              />\r\n            </label>\r\n            {/* Include answers edit logic... */}\r\n            <button onClick={() => handleSaveChanges(question)}>Save Changes</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminEditQuestions;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}