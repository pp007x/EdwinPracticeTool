{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\Documents\\\\EdwinPracticeTool\\\\frontend\\\\src\\\\components\\\\Admin\\\\AdminNewQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport yaml from 'js-yaml';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminNewQuestion() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleFileUpload = async event => {\n    setLoading(true);\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const yamlText = e.target.result;\n      // convert YAML to JSON\n      const questions = yaml.load(yamlText);\n      setQuestions(questions);\n      try {\n        const response = await fetch(`${config.API_BASE_URL}/api/YamlUploadController`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(questions)\n        });\n        if (response.ok) {\n          alert(\"Data successfully uploaded\");\n        } else {\n          alert(\"Failed to upload data\");\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload,\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminNewQuestion, \"KZp68kCF9eziSZDsKNRO+w6tex8=\");\n_c = AdminNewQuestion;\nexport default AdminNewQuestion;\nvar _c;\n$RefreshReg$(_c, \"AdminNewQuestion\");","map":{"version":3,"names":["React","useState","yaml","jsxDEV","_jsxDEV","AdminNewQuestion","_s","questions","setQuestions","loading","setLoading","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","yamlText","result","load","response","fetch","config","API_BASE_URL","method","headers","body","JSON","stringify","ok","alert","error","console","readAsText","children","type","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/steph/Documents/EdwinPracticeTool/frontend/src/components/Admin/AdminNewQuestions.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport yaml from 'js-yaml';\r\n\r\nfunction AdminNewQuestion() {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleFileUpload = async (event) => {\r\n        setLoading(true);\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n            const yamlText = e.target.result;\r\n            // convert YAML to JSON\r\n            const questions = yaml.load(yamlText);\r\n            setQuestions(questions);\r\n\r\n            try {\r\n                const response = await fetch(`${config.API_BASE_URL}/api/YamlUploadController`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(questions)\r\n                });\r\n            \r\n                if (response.ok) {\r\n                    alert(\"Data successfully uploaded\");\r\n                } else {\r\n                    alert(\"Failed to upload data\");\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" onChange={handleFileUpload} disabled={loading} />\r\n            {/* Render your questions here */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminNewQuestion;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMU,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACtCF,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMG,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAOC,CAAC,IAAK;MACzB,MAAMC,QAAQ,GAAGD,CAAC,CAACL,MAAM,CAACO,MAAM;MAChC;MACA,MAAMd,SAAS,GAAGL,IAAI,CAACoB,IAAI,CAACF,QAAQ,CAAC;MACrCZ,YAAY,CAACD,SAAS,CAAC;MAEvB,IAAI;QACA,MAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,MAAM,CAACC,YAAa,2BAA0B,EAAE;UAC5EC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACxB,SAAS;QAClC,CAAC,CAAC;QAEF,IAAIgB,QAAQ,CAACS,EAAE,EAAE;UACbC,KAAK,CAAC,4BAA4B,CAAC;QACvC,CAAC,MAAM;UACHA,KAAK,CAAC,uBAAuB,CAAC;QAClC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAClC,CAAC,SAAS;QACNxB,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IACDM,MAAM,CAACoB,UAAU,CAACvB,IAAI,CAAC;EAC3B,CAAC;EAED,oBACIT,OAAA;IAAAiC,QAAA,eACIjC,OAAA;MAAOkC,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAE5B,gBAAiB;MAAC6B,QAAQ,EAAE/B;IAAQ;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEnE,CAAC;AAEd;AAACtC,EAAA,CAzCQD,gBAAgB;AAAAwC,EAAA,GAAhBxC,gBAAgB;AA2CzB,eAAeA,gBAAgB;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}