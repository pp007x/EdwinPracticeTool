{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\Documents\\\\EdwinPracticeTool\\\\frontend\\\\src\\\\components\\\\Admin\\\\AdminNewQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport yaml from 'js-yaml';\nimport config from '../../config';\nimport DashboardSidebar from './AdminSidebar';\nimport styles from '../../Css/CompanyDashboard.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = _ref => {\n  let {\n    title\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.header,\n    children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"page-title\"],\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n};\n_c = Header;\nfunction AdminNewQuestion() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [companies, setCompanies] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n  useEffect(() => {\n    fetch(`${config.API_BASE_URL}/api/companies`).then(response => response.json()).then(data => setCompanies(data));\n  }, []);\n  const handleFileUpload = async event => {\n    setLoading(true);\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const yamlText = e.target.result;\n      const questions = yaml.load(yamlText);\n      questions.forEach(question => question.CompanyId = selectedCompany);\n      setQuestions(questions);\n      try {\n        const response = await fetch(`${config.API_BASE_URL}/api/YamlUpload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(questions)\n        });\n        if (response.ok) {\n          alert(\"Data successfully uploaded\");\n        } else {\n          alert(\"Failed to upload data\");\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dashboard,\n    children: [/*#__PURE__*/_jsxDEV(DashboardSidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.main,\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Admin New Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.sidebarRight,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Add new questions through YAML\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: styles.label,\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Select a company:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: styles.dropdownMenu,\n            value: selectedCompany,\n            onChange: event => setSelectedCompany(event.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a company...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 21\n            }, this), companies.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: company.id,\n              children: company.name\n            }, company.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileUpload,\n          disabled: loading || !selectedCompany\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminNewQuestion, \"j+gK9IozWi368ZGdAPLJlI1NCRQ=\");\n_c2 = AdminNewQuestion;\nexport default AdminNewQuestion;\nvar _c, _c2;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"AdminNewQuestion\");","map":{"version":3,"names":["React","useState","useEffect","yaml","config","DashboardSidebar","styles","jsxDEV","_jsxDEV","Header","_ref","title","className","header","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","AdminNewQuestion","_s","questions","setQuestions","loading","setLoading","companies","setCompanies","selectedCompany","setSelectedCompany","fetch","API_BASE_URL","then","response","json","data","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","yamlText","result","load","forEach","question","CompanyId","method","headers","body","JSON","stringify","ok","alert","error","console","readAsText","dashboard","main","sidebarRight","label","dropdownMenu","value","onChange","map","company","id","name","type","disabled","_c2","$RefreshReg$"],"sources":["C:/Users/steph/Documents/EdwinPracticeTool/frontend/src/components/Admin/AdminNewQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport yaml from 'js-yaml';\r\nimport config from '../../config';\r\nimport DashboardSidebar from './AdminSidebar';\r\nimport styles from '../../Css/CompanyDashboard.module.css'; \r\nconst Header = ({ title }) => (\r\n  <div className={styles.header}>\r\n    <hr />\r\n    <div className={styles[\"page-title\"]}>{title}</div>\r\n  </div>\r\n);\r\n\r\nfunction AdminNewQuestion() {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [selectedCompany, setSelectedCompany] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(`${config.API_BASE_URL}/api/companies`)\r\n            .then(response => response.json())\r\n            .then(data => setCompanies(data));\r\n    }, []);\r\n\r\n    const handleFileUpload = async (event) => {\r\n        setLoading(true);\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n            const yamlText = e.target.result;\r\n            const questions = yaml.load(yamlText);\r\n            questions.forEach(question => question.CompanyId = selectedCompany);\r\n            setQuestions(questions);\r\n\r\n            try {\r\n                const response = await fetch(`${config.API_BASE_URL}/api/YamlUpload`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(questions)\r\n                });\r\n\r\n                if (response.ok) {\r\n                    alert(\"Data successfully uploaded\");\r\n                } else {\r\n                    alert(\"Failed to upload data\");\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.dashboard}>\r\n            <DashboardSidebar />\r\n            <div className={styles.main}>\r\n                <Header title=\"Admin New Question\" />\r\n                <div className={styles.sidebarRight}>\r\n                <h1>Add new questions through YAML</h1>\r\n                    <label className={styles.label}><b>Select a company:</b></label>\r\n                    <div>\r\n                <select className={styles.dropdownMenu} value={selectedCompany} onChange={event => setSelectedCompany(event.target.value)}>\r\n                    <option value=\"\">Select a company...</option>\r\n                    {companies.map(company => (\r\n                        <option key={company.id} value={company.id}>{company.name}</option>\r\n                    ))}\r\n                </select>\r\n                </div>\r\n                <input type=\"file\" onChange={handleFileUpload} disabled={loading || !selectedCompany} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminNewQuestion;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}